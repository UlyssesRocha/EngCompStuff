/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ppdSocket;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/**
 *
 * @author ulysses
 */
public class mainGameView extends javax.swing.JFrame {
   private  Client client;
   private  ArrayList<JLabel> cards;
   private  int[] cardsMovedThisTurn = new int[2];
   private int[] playerPoints = new int[2];
   private int auxMoves=0;
   private boolean isMyTurn = false;
   private boolean block = false;
    
    public void startClient(String serverName, int serverPort,String playerName){
        cards = new ArrayList<>();
        client = new Client(serverName,serverPort,this);
        client.connectAndSendName(playerName);
        lLocalPlayerName.setText(playerName);
        playerPoints[0]=playerPoints[1]=0;
        cardEvents();
        loadCards();
    }
 
    public void loadCards(){
        for(int i=0;i<24;i++)
            cards.get(i).setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img0.png")));

    }
    
    /**
     * Creates new form mainGameView
     */
    public mainGameView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSendMessage = new javax.swing.JTextArea();
        btnSendMessage = new javax.swing.JButton();
        lLocalPlayerName = new javax.swing.JLabel();
        lRemotePlayerName = new javax.swing.JLabel();
        lLocalPlayerPoints = new javax.swing.JLabel();
        lRemotePlayerPoints = new javax.swing.JLabel();
        lCard01 = new javax.swing.JLabel();
        lCard02 = new javax.swing.JLabel();
        lCard03 = new javax.swing.JLabel();
        lCard04 = new javax.swing.JLabel();
        lCard05 = new javax.swing.JLabel();
        lCard06 = new javax.swing.JLabel();
        lCard07 = new javax.swing.JLabel();
        lCard08 = new javax.swing.JLabel();
        lCard09 = new javax.swing.JLabel();
        lCard10 = new javax.swing.JLabel();
        lCard11 = new javax.swing.JLabel();
        lCard12 = new javax.swing.JLabel();
        lCard13 = new javax.swing.JLabel();
        lCard14 = new javax.swing.JLabel();
        lCard15 = new javax.swing.JLabel();
        lCard16 = new javax.swing.JLabel();
        lCard17 = new javax.swing.JLabel();
        lCard18 = new javax.swing.JLabel();
        lCard19 = new javax.swing.JLabel();
        lCard20 = new javax.swing.JLabel();
        lCard21 = new javax.swing.JLabel();
        lCard22 = new javax.swing.JLabel();
        lCard23 = new javax.swing.JLabel();
        lCard24 = new javax.swing.JLabel();
        lStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 95, 250, 480));

        txtSendMessage.setColumns(20);
        txtSendMessage.setRows(5);
        jScrollPane2.setViewportView(txtSendMessage);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 580, 250, -1));

        btnSendMessage.setText("Send");
        btnSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMessageActionPerformed(evt);
            }
        });
        getContentPane().add(btnSendMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 680, -1, -1));

        lLocalPlayerName.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lLocalPlayerName.setText("nomeJogadorLocal");
        getContentPane().add(lLocalPlayerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lRemotePlayerName.setText("nomeJogadorRemoto");
        getContentPane().add(lRemotePlayerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        lLocalPlayerPoints.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lLocalPlayerPoints.setText("0");
        getContentPane().add(lLocalPlayerPoints, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        lRemotePlayerPoints.setText("0");
        getContentPane().add(lRemotePlayerPoints, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, -1, -1));
        getContentPane().add(lCard01, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, -1, -1));
        getContentPane().add(lCard02, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 139, -1, -1));
        getContentPane().add(lCard03, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 258, -1, -1));
        getContentPane().add(lCard04, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 377, -1, -1));
        getContentPane().add(lCard05, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 496, -1, -1));
        getContentPane().add(lCard06, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 615, -1, -1));
        getContentPane().add(lCard07, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 21, -1, -1));
        getContentPane().add(lCard08, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 139, -1, -1));
        getContentPane().add(lCard09, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 258, -1, -1));
        getContentPane().add(lCard10, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 377, -1, -1));
        getContentPane().add(lCard11, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 496, -1, -1));
        getContentPane().add(lCard12, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 615, -1, -1));
        getContentPane().add(lCard13, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 21, -1, -1));
        getContentPane().add(lCard14, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 139, -1, -1));
        getContentPane().add(lCard15, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 258, -1, -1));
        getContentPane().add(lCard16, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 377, -1, -1));
        getContentPane().add(lCard17, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 496, -1, -1));
        getContentPane().add(lCard18, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 615, -1, -1));
        getContentPane().add(lCard19, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, -1, -1));
        getContentPane().add(lCard20, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 140, -1, -1));
        getContentPane().add(lCard21, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 260, -1, -1));
        getContentPane().add(lCard22, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 380, -1, -1));
        getContentPane().add(lCard23, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 500, -1, -1));
        getContentPane().add(lCard24, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 620, -1, -1));

        lStatus.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lStatus.setText("Aguardando Oponente");
        getContentPane().add(lStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 280, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendMessageActionPerformed
        // TODO add your handling code here:
        client.sendMessage(txtSendMessage.getText());
        txtSendMessage.setText("");
    }//GEN-LAST:event_btnSendMessageActionPerformed

    private void cardClicked(int n) {                                     
        // TODO add your handling code here:]
        //tem que ser meu turno, eu nao posso estar bloqueado e a carta deve estar visivel
        if(isMyTurn&&!block&&cards.get(n-1).isVisible()){
            client.playTheCard(n);
        }
    }       
    
    //essa funcao esta horrivel, essa Ã© a melhor forma de fazer isso ???  (ARRUMAR)
    private void cardEvents(){
        cards.add(lCard01);
        cards.add(lCard02);
        cards.add(lCard03);
        cards.add(lCard04);
        cards.add(lCard05);
        cards.add(lCard06);
        cards.add(lCard07);
        cards.add(lCard08);
        cards.add(lCard09);
        cards.add(lCard10);
        cards.add(lCard11);
        cards.add(lCard12);
        cards.add(lCard13);
        cards.add(lCard14);
        cards.add(lCard15);
        cards.add(lCard16);
        cards.add(lCard17);
        cards.add(lCard18);
        cards.add(lCard19);
        cards.add(lCard20);
        cards.add(lCard21);
        cards.add(lCard22);
        cards.add(lCard23);
        cards.add(lCard24);

//Nao consegui usar um for para declarar todo mundo de uma vez so, se sobrar tempo eu olho isso denovo
                  lCard01.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(1);
         }
        });        lCard02.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(2);
         }
        });
          lCard03.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(3);
         }
        });
          lCard04.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(4);
         }
        });
          lCard05.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(5);
         }
        });
          lCard06.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(6);
         }
        });
          lCard07.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(7);
         }
        });
          lCard08.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(8);
         }
        });
          lCard09.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(9);
         }
        });
          lCard10.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(10);
         }
        });
          lCard11.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(11);
         }
        });
          lCard12.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(12);
         }
        });
          lCard13.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(13);
         }
        });
          lCard14.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(14);
         }
        });
          lCard15.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(15);
         }
        });
          lCard16.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(16);
         }
        });
          lCard17.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(17);
         }
        });
            lCard18.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(18);
         }
        });
            lCard19.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(19);
         }
        });
            lCard20.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(20);
         }
        });            lCard21.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(21);
         }
        });            lCard22.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(22);
         }
        });            lCard23.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(23);
         }
        });
                    lCard24.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cardClicked(24);
         }
        });
    }
    
    
    //exibe mensagens (suas e do oponente)
    public void receiveMessage(String message){
        txtChat.append(message+"\n");
    }
    
    //Exibe carta
    public void receiveCard(int cardNumber, int cardContent){
            if(!block){
                cardsMovedThisTurn[auxMoves++]=cardNumber;
                cards.get(cardNumber-1).setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img"+cardContent+".png")));
            }
    }
    
    //exibe mudanca de status
    public void changeStatus(String status){
        lStatus.setText(status);
        
    }
    
    public void hideCards(String message,boolean isMyTurn){
        block = true;
       new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
            //esperar 2 segundos
                for(int i=0; i<auxMoves;i++){
                    cards.get(cardsMovedThisTurn[i]-1).setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img0.png")));
                    repaint();
                }
                auxMoves = 0;    
                lStatus.setText(message);
                 setIsMyTurn(isMyTurn);
                 block = false;
            }
        }, 
        2000 
        );
       
    }
    public void addOpponentName(String opponentName){
        lRemotePlayerName.setText(opponentName);
    }
    
    
    //Remove cartas do jogo (BUG - as vezes nao remove a ultima carta jogada)
    public void removeCards(String message, boolean isMyTurn){
        block = true;
        new java.util.Timer().schedule( 
                new java.util.TimerTask() {
                    @Override
                    public void run() {
                        for(int i=0; i<auxMoves;i++){
                            cards.get(cardsMovedThisTurn[i]-1).setVisible(false);
                            repaint();
                         }
                        
                         lStatus.setText(message);
                         setIsMyTurn(isMyTurn);
                         
                         if(isMyTurn){
                             playerPoints[0]++;
                             lLocalPlayerPoints.setText(playerPoints[0]+"");
                         }
                         else{
                             playerPoints[1]++;
                             lRemotePlayerPoints.setText(playerPoints[1]+"");
                         }

                         block = false;
                         auxMoves = 0;

                    }
                }, 
                2000 
            );
    }
    
    
    public void setIsMyTurn(boolean isMyTurn){
        this.isMyTurn = isMyTurn;
    }
    
    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {   
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainGameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainGameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainGameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainGameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainGameView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSendMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lCard01;
    private javax.swing.JLabel lCard02;
    private javax.swing.JLabel lCard03;
    private javax.swing.JLabel lCard04;
    private javax.swing.JLabel lCard05;
    private javax.swing.JLabel lCard06;
    private javax.swing.JLabel lCard07;
    private javax.swing.JLabel lCard08;
    private javax.swing.JLabel lCard09;
    private javax.swing.JLabel lCard10;
    private javax.swing.JLabel lCard11;
    private javax.swing.JLabel lCard12;
    private javax.swing.JLabel lCard13;
    private javax.swing.JLabel lCard14;
    private javax.swing.JLabel lCard15;
    private javax.swing.JLabel lCard16;
    private javax.swing.JLabel lCard17;
    private javax.swing.JLabel lCard18;
    private javax.swing.JLabel lCard19;
    private javax.swing.JLabel lCard20;
    private javax.swing.JLabel lCard21;
    private javax.swing.JLabel lCard22;
    private javax.swing.JLabel lCard23;
    private javax.swing.JLabel lCard24;
    private javax.swing.JLabel lLocalPlayerName;
    private javax.swing.JLabel lLocalPlayerPoints;
    private javax.swing.JLabel lRemotePlayerName;
    private javax.swing.JLabel lRemotePlayerPoints;
    private javax.swing.JLabel lStatus;
    private javax.swing.JTextArea txtChat;
    private javax.swing.JTextArea txtSendMessage;
    // End of variables declaration//GEN-END:variables
}
